zero:
_reset:
    jump zero zero _main

_intr:
    ; レジスタ退避
    store sp sp 0
    subi  sp sp 4
    store a0 sp 1
    store a1 sp 2
    store a2 sp 3
    store a3 sp 4
    ; 割込み先にジャンプ
    andi  t0 csr 0x004
    brlt  zero t0 intr0
    andi  t0 csr 0x008
    brlt  zero t0 intr1
    andi  t0 csr 0x010
    brlt  zero t0 intr2
    andi  t0 csr 0x020
    brlt  zero t0 intr3
_iret:
    ; レジスタの復元
    load  a3 sp 4
    load  a2 sp 3
    load  a1 sp 2
    load  a0 sp 1
    addi  sp sp 4
    load  sp sp 0
    ; 割り込みから復帰
    jump zero ira zero

; プログラム開始前処理
_main:
    loadi sp 0xffff
    loadi fp 0xffff
    jump  zero zero main

; プログラム終了後処理
_ret:
    ori csr csr 0x100

; 各割り込みの処理
intr0:
    loadi cout 0x30 ; 0
    ori   csr csr 0x080
    jump zero zero _iret
intr1:
    loadi cout 0x31 ; 1
    ori   csr csr 0x080
    jump zero zero _iret
intr2:
    loadi cout 0x32 ; 2
    ori   csr csr 0x080
    jump zero zero _iret
intr3:
    loadi cout 0x33 ; 3
    ori   csr csr 0x080
    jump zero zero _iret

; メイン関数
main:
    loadi a0 0xABCD
    jump ra zero _print_hex
    jump zero zero _ret
