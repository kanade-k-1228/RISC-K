_reset:
    jump  zero zero _main

_intr:
    andi  csr csr 0xfffe ; 二重割り込み禁止
    ; レジスタ退避
    subi  sp sp 14 ; スタックを確保
    store s0 sp 14
    store s1 sp 13
    store s2 sp 12
    store s3 sp 11
    store t0 sp 10
    store t1 sp 9
    store t2 sp 8
    store t3 sp 7
    store a0 sp 6
    store a1 sp 5
    store a2 sp 4
    store a3 sp 3
    store fp sp 2
    store ra sp 1
    ; 割込み先にジャンプ
    andi t0 csr 0b0000'0000'0000'0100
    if   t0 intr0
    andi t0 csr 0b0000'0000'0000'1000
    if   t0 intr1
    andi t0 csr 0b0000'0000'0001'0000
    if   t0 intr2
    andi t0 csr 0b0000'0000'0010'0000
    if   t0 intr3
_iret:
    ; レジスタの復元
    load ra sp 1
    load fp sp 2
    load a3 sp 3
    load a2 sp 4
    load a1 sp 5
    load a0 sp 6
    load t3 sp 7
    load t2 sp 8
    load t1 sp 9
    load t0 sp 10
    load s3 sp 11
    load s2 sp 12
    load s1 sp 13
    load s0 sp 14
    addi sp sp 14 ; スタックを解放
    ori  csr csr 0x0001 ; 割り込み許可
    iret                 ; 割り込みから復帰

; プログラム開始前処理
_main:
    loadi sp 0xffff
    loadi fp 0xffff
    jump  zero zero main

; プログラム終了後処理
_ret:
    ori csr csr 0x100

; 各割り込みの処理
intr0:
    loadi cout 0x69
    ori   csr csr 0x080
    loadi cout 0x6e
    ori   csr csr 0x080
    loadi cout 0x74
    ori   csr csr 0x080
    loadi cout 0x72
    ori   csr csr 0x080
    loadi cout 0x30 ; 0
    ori   csr csr 0x080
    loadi cout 0x0a
    ori   csr csr 0x080
    andi  csr csr 0xfffb ; 割り込みフラグを消す
    jump zero zero _iret
intr1:
    loadi cout 0x69
    ori   csr csr 0x080
    loadi cout 0x6e
    ori   csr csr 0x080
    loadi cout 0x74
    ori   csr csr 0x080
    loadi cout 0x72
    ori   csr csr 0x080
    loadi cout 0x31 ; 1
    ori   csr csr 0x080
    loadi cout 0x0a
    ori   csr csr 0x080
    andi  csr csr 0xfff7 ; 割り込みフラグを消す
    jump zero zero _iret
intr2:
    loadi cout 0x69
    ori   csr csr 0x080
    loadi cout 0x6e
    ori   csr csr 0x080
    loadi cout 0x74
    ori   csr csr 0x080
    loadi cout 0x72
    ori   csr csr 0x080
    loadi cout 0x32 ; 2
    ori   csr csr 0x080
    loadi cout 0x0a
    ori   csr csr 0x080
    andi  csr csr 0xffef ; 割り込みフラグを消す
    jump zero zero _iret
intr3:
    loadi cout 0x69
    ori   csr csr 0x080
    loadi cout 0x6e
    ori   csr csr 0x080
    loadi cout 0x74
    ori   csr csr 0x080
    loadi cout 0x72
    ori   csr csr 0x080
    loadi cout 0x33 ; 3
    ori   csr csr 0x080
    loadi cout 0x0a
    ori   csr csr 0x080
    andi  csr csr 0xffdf ; 割り込みフラグを消す
    jump zero zero _iret

; メイン関数
main:
    loadi s0 0xaa00
    loadi s1 0xaa11
    loadi s2 0xaa22
    loadi s3 0xaa33
    loadi t0 0xbb00
    loadi t1 0xbb11
    loadi t2 0xbb22
    loadi t3 0xbb33
    loadi a0 0xcc00
    loadi a1 0xcc11
    loadi a2 0xcc22
    loadi a3 0xcc33
    ori   csr csr 0x0001 ; 割り込み許可
loop:
    jump zero zero loop
    jump zero zero _ret
