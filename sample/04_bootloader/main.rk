; -----------------------------------------------
; システム

zero:
_reset:
    jump zero zero _main

_intr:
    ; レジスタ退避
    store sp sp 0
    subi  sp sp 4
    store a0 sp 1
    store a1 sp 2
    store a2 sp 3
    store a3 sp 4
    ; 割込み先にジャンプ
    andi  t0 csr 0x004
    brlt  zero t0 intr0
    andi  t0 csr 0x008
    brlt  zero t0 intr1
    andi  t0 csr 0x010
    brlt  zero t0 intr2
    andi  t0 csr 0x020
    brlt  zero t0 intr3
_iret:
    ; レジスタの復元
    load  a3 sp 4
    load  a2 sp 3
    load  a1 sp 2
    load  a0 sp 1
    addi  sp sp 4
    load  sp sp 0
    ; 割り込みから復帰
    jump zero ira zero

; プログラム開始前処理
_main:
    loadi sp 0xffff
    loadi fp 0xffff
    jump  zero zero main

; プログラム終了後処理
_ret:
    ori csr csr 0x100

; -----------------------------------------------
; 標準ライブラリ

; シリアル送信
; loadi a0 0x41
; jump ra zero _print
; > A
_print:
    add cout a0 zero
    ori csr csr 0x80 ; set send flag
    jump zero ra zero

; ['A','B','C','\0']
_print_str:

; 16進数として値を出力
; loadi a0 0x01EF
; jump ra zero _print_hex
; > 01EF
_print_hex:
    loadi a3 4
    loadi a2 10
_print_hex_for:
    breq a3 zero _print_hex_break
    lrot a0 a0 zero
    lrot a0 a0 zero
    lrot a0 a0 zero
    lrot a0 a0 zero
    andi a1 a0 0x00F ; a1 = a0 & f
; cout = a1 < 10 ? a1 + '0' : a1 + ('A' - 10)
    brlt a1 a2 _print_hex_number
_print_hex_alphabet:
    addi cout a1 0x37
    jump zero zero _print_hex_continue
_print_hex_number:
    addi cout a1 0x30
_print_hex_continue:
    ori  csr csr 0x80 ; set send flag
    subi a3 a3 1
    jump zero zero _print_hex_for
_print_hex_break:
    jump zero ra 0

; -----------------------------------------------
; ユーザプログラム

; 各割り込みの処理
intr0:
    jump zero zero _iret
intr1:
    jump zero zero _iret
intr2:
    jump zero zero _iret
intr3:
    jump zero zero _iret

; メイン関数
main:
    loadi a0 0xABCD
    jump ra zero _print_hex
    jump zero zero _ret
